server:
  port: 8090
spring:
  application:
    name: auth-service
  profiles:
    active: ${APPLICATION_PROFILE:local}
    include: oauth
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        show_sql: true
        format_sql: true
        default_batch_fetch_size: 100
        query.in_clause_parameter_padding: true
  kafka:
    consumer:
      group-id: auth-service-group
  data:
    redis:
      connect-timeout: 3000
      timeout: 3000
  mail:
    host: ${gmail.host}
    port: ${gmail.port}
    username: ${gmail.username}
    password: ${gmail.password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true
app:
  auth:
    oauth:
      authorization-uri: ${oauth.authorization-uri}
      authorized-redirect-uris: ${oauth.authorized-redirect-uris}
---
spring:
  config:
    activate:
      on-profile: local
  cloud:
    config:
      enabled: false
  jpa:
    hibernate:
      ddl-auto: create
  datasource:
    hikari:
      source:
        jdbc-url: jdbc:mysql://${MYSQL_SOURCE_ADDR:localhost:13306}/brieflyz_auth?createDatabaseIfNotExist=true
        username: ${mysql.username}
        password: ${mysql.root-password}
        pool-name: auth-service-source-pool
        maximum-pool-size: 3
        minimum-idle: 1
      replica:
        jdbc-url: jdbc:mysql://${MYSQL_REPLICA_ADDR:localhost:23306}/brieflyz_auth?createDatabaseIfNotExist=true
        username: ${mysql.username}
        password: ${mysql.root-password}
        pool-name: auth-service-replica-pool
        maximum-pool-size: 5
        minimum-idle: 3
        read-only: true
  security:
    oauth2:
      client:
        registration:
          google:
            redirect-uri: http://localhost:8000/login/oauth2/code/google
          kakao:
            redirect-uri: http://localhost:8000/login/oauth2/code/kakao
          naver:
            redirect-uri: http://localhost:8000/login/oauth2/code/naver
  data:
    redis:
      cluster:
        nodes: ${REDIS_CLUSTER_NODES:localhost:6379}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092,localhost:9093,localhost:9094}
app:
  auth:
    oauth:
      redirect-uri: http://localhost:8000/login/oauth2/code/{registrationId}
    kafka:
      num-of-partitions: 9
      replication-factor: 3
---
spring:
  config:
    activate:
      on-profile: dev
    import: configserver:http://config-server:8888/
  cloud:
    config:
      name: auth-service
      profile: dev