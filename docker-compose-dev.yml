services:
  config-server:
    image: ghcr.io/yunhozz/config-server:latest
    container_name: config-server
    ports:
      - "8888"
    environment:
      CONFIG_PATH: brieflyz/
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: on-failure
    networks:
      - dev

  api-gateway:
    build:
      dockerfile: api-gateway/Dockerfile
      context: .
    image: ${ECR_REGISTRY}/brieflyz/api-gateway:latest
    scale: 3
    ports:
      - "8000"
    environment:
      APPLICATION_PROFILE: dev
    volumes:
      - log-volume:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8000/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: on-failure
    networks:
      - dev

  auth-service:
    build:
      dockerfile: auth-service/Dockerfile
      context: .
    image: ${ECR_REGISTRY}/brieflyz/auth-service:latest
    scale: 3
    ports:
      - "8090"
    environment:
      APPLICATION_PROFILE: dev
      TZ: Asia/Seoul
    volumes:
      - log-volume:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8090/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: on-failure
    networks:
      - dev

  subscription-service:
    build:
      dockerfile: subscription-service/Dockerfile
      context: .
    image: ${ECR_REGISTRY}/brieflyz/subscription-service:latest
    scale: 3
    ports:
      - "8070"
    environment:
      APPLICATION_PROFILE: dev
      TZ: Asia/Seoul
    volumes:
      - log-volume:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8070/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: on-failure
    networks:
      - dev

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./conf/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    restart: always
    networks:
      - dev

  zookeeper-0:
    image: zookeeper:latest
    container_name: zookeeper-0
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper-0:2888:3888;2181 server.2=zookeeper-1:2888:3888;2181 server.3=zookeeper-2:2888:3888;2181
    networks:
      - dev

  zookeeper-1:
    image: zookeeper:latest
    container_name: zookeeper-1
    ports:
      - "2182:2181"
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper-0:2888:3888;2181 server.2=zookeeper-1:2888:3888;2181 server.3=zookeeper-2:2888:3888;2181
    networks:
      - dev

  zookeeper-2:
    image: zookeeper:latest
    container_name: zookeeper-2
    ports:
      - "2183:2181"
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper-0:2888:3888;2181 server.2=zookeeper-1:2888:3888;2181 server.3=zookeeper-2:2888:3888;2181
    networks:
      - dev

  kafka-0:
    image: wurstmeister/kafka:latest
    container_name: kafka-0
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-0:2181,zookeeper-1:2182,zookeeper-2:2183
      KAFKA_LISTENERS: INTERNAL://kafka-0:19092,EXTERNAL://kafka-0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-0:19092,EXTERNAL://kafka-0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper-0
      - zookeeper-1
      - zookeeper-2
    networks:
      - dev

  kafka-1:
    image: wurstmeister/kafka:latest
    container_name: kafka-1
    ports:
      - "9093:9093"
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-0:2181,zookeeper-1:2182,zookeeper-2:2183
      KAFKA_LISTENERS: INTERNAL://kafka-1:19093,EXTERNAL://kafka-1:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19093,EXTERNAL://kafka-1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper-0
      - zookeeper-1
      - zookeeper-2
    networks:
      - dev

  kafka-2:
    image: wurstmeister/kafka:latest
    container_name: kafka-2
    ports:
      - "9094:9094"
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-0:2181,zookeeper-1:2182,zookeeper-2:2183
      KAFKA_LISTENERS: INTERNAL://kafka-2:19094,EXTERNAL://kafka-2:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19094,EXTERNAL://kafka-2:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper-0
      - zookeeper-1
      - zookeeper-2
    networks:
      - dev

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "10000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: brieflyz_kafka_clusters
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-0:19092,kafka-1:19093,kafka-2:19094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    restart: always
    networks:
      - dev

  mysql-source:
    image: mysql:latest
    container_name: mysql-source
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: Asia/Seoul
    volumes:
      - ./conf/mysql/my-source.cnf:/etc/mysql/my.cnf
      - mysql-source-volume:/var/lib/mysql
    networks:
      - dev

  mysql-replica:
    image: mysql:latest
    container_name: mysql-replica
    ports:
      - "23306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: Asia/Seoul
    volumes:
      - ./conf/mysql/my-replica.cnf:/etc/mysql/my.cnf
      - mysql-replica-volume:/var/lib/mysql
    depends_on:
      - mysql-source
    networks:
      - dev

  redis-0:
    image: redis:latest
    container_name: redis-0
    ports:
      - "6379:6379"
      - "16379:16379"
    command: >
      bash -c "
        redis-server /etc/redis.conf &
        sleep 5 &&
        yes yes | redis-cli --cluster create redis-0:6379 redis-1:6379 redis-2:6379 &&
        tail -f /dev/null
      "
    volumes:
      - ./conf/redis/redis-0.conf:/etc/redis.conf
    restart: always
    networks:
      - dev

  redis-1:
    image: redis:latest
    container_name: redis-1
    ports:
      - "6380:6379"
      - "16380:16379"
    command: redis-server /etc/redis.conf
    volumes:
      - ./conf/redis/redis-1.conf:/etc/redis.conf
    restart: always
    networks:
      - dev

  redis-2:
    image: redis:latest
    container_name: redis-2
    ports:
      - "6381:6379"
      - "16381:16379"
    command: redis-server /etc/redis.conf
    volumes:
      - ./conf/redis/redis-2.conf:/etc/redis.conf
    restart: always
    networks:
      - dev

  elasticsearch:
    image: elasticsearch:9.0.2
    container_name: elasticsearch
    ports:
      - "19200:9200"
      - "19300:9300"
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    volumes:
      - ./conf/elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - es-volume:/usr/share/elasticsearch/data
    networks:
      - dev

  kibana:
    image: kibana:9.0.2
    container_name: kibana
    ports:
      - "15601:5601"
    volumes:
      - ./conf/elk/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - dev

  logstash:
    image: logstash:9.0.2
    container_name: logstash
    ports:
      - "5044"
    volumes:
      - ./conf/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    depends_on:
      - elasticsearch
    networks:
      - dev

  filebeat:
    image: elastic/filebeat:9.0.2
    container_name: filebeat
    user: root
    volumes:
      - ./conf/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - log-volume:/logs:ro
    depends_on:
      - logstash
    networks:
      - dev

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "19090:9090"
    volumes:
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - dev

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "13000:3000"
    command:
      - sh
      - -c
      - chown -R 472:472 /var/lib/grafana
    volumes:
      - ./conf/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./conf/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./conf/grafana/dashboards/:/var/lib/grafana/dashboards/
    depends_on:
      - prometheus
    restart: always
    networks:
      - dev

  nginx-prometheus:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-prometheus
    ports:
      - "9113:9113"
    command:
      - --nginx.scrape-uri
      - http://nginx/stub_status
    depends_on:
      - nginx
      - prometheus
    restart: always
    networks:
      - dev

volumes:
  mysql-source-volume:
  mysql-replica-volume:
  es-volume:
  log-volume:

networks:
  dev: