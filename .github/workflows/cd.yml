name: CD - Deploy to GCP Artifact Registry & GKE

on:
  push:
    branches: [ develop, master ]

env:
  GCP_PROJECT_ID: your-gcp-project-id
  GCP_REGION: asia-northeast3
  GCP_REPO_NAME: brieflyz

permissions:
  contents: read
  id-token: write

jobs:
  filter:
    name: Filter Updated Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            subscription-service:
              - 'subscription-service/**'
            ai-service:
              - 'ai-service/**'
    outputs:
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      auth-service: ${{ steps.filter.outputs.auth-service }}
      subscription-service: ${{ steps.filter.outputs.subscription-service }}
      ai-service: ${{ steps.filter.outputs.ai-service }}

  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.api-gateway == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      IMAGE_NAME: api-gateway

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build, Tag, and Push API Gateway Image to Artifact Registry
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPO_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "Building API Gateway Docker image..."
          docker build -f api-gateway/Dockerfile -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-auth-service:
    name: Deploy Auth Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.auth-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      IMAGE_NAME: auth-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build, Tag, and Push Auth Service Image to Artifact Registry
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPO_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "Building Auth Service Docker image..."
          docker build -f auth-service/Dockerfile -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-subscription-service:
    name: Deploy Subscription Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.subscription-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      IMAGE_NAME: subscription-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build, Tag, and Push Subscription Service Image to Artifact Registry
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPO_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "Building Subscription Service Docker image..."
          docker build -f subscription-service/Dockerfile -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-ai-service:
    name: Deploy AI Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.ai-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      IMAGE_NAME: ai-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build, Tag, and Push AI Service Image to Artifact Registry
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPO_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "Building AI Service Docker image..."
          docker build -f ai-service/Dockerfile -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [ filter, deploy-api-gateway, deploy-auth-service, deploy-subscription-service, deploy-ai-service ]
    if: always()

    steps:
      - name: Generate Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Modules Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **API Gateway**: ${{ needs.filter.outputs.api-gateway == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auth Service**: ${{ needs.filter.outputs.auth-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Subscription Service**: ${{ needs.filter.outputs.subscription-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Service**: ${{ needs.filter.outputs.ai-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-api-gateway.result }}" == "success" ]]; then
            echo "- **API Gateway**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "failure" ]]; then
            echo "- **API Gateway**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "skipped" ]]; then
            echo "- **API Gateway**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-auth-service.result }}" == "success" ]]; then
            echo "- **Auth Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "failure" ]]; then
            echo "- **Auth Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "skipped" ]]; then
            echo "- **Auth Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-subscription-service.result }}" == "success" ]]; then
            echo "- **Subscription Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "failure" ]]; then
            echo "- **Subscription Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "skipped" ]]; then
            echo "- **Subscription Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-ai-service.result }}" == "success" ]]; then
            echo "- **AI Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "failure" ]]; then
            echo "- **AI Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "skipped" ]]; then
            echo "- **AI Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY