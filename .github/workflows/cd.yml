name: CD - Deploy to AWS ECR & ECS

on:
  push:
    branches: [ develop ]

env:
  AWS_REGION: ap-northeast-2

permissions:
  contents: read
  pull-requests: read

jobs:
  filter:
    name: Filter Updated Modules
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      auth-service: ${{ steps.filter.outputs.auth-service }}
      subscription-service: ${{ steps.filter.outputs.subscription-service }}
      ai-service: ${{ steps.filter.outputs.ai-service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            subscription-service:
              - 'subscription-service/**'
            ai-service:
              - 'ai-service/**'

  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.api-gateway == 'true'
    environment: production
    env:
      ECR_REPOSITORY: brieflyz/api-gateway
    #      ECS_SERVICE: brieflyz-api-gateway-service
    #      ECS_CLUSTER: brieflyz-cluster
    #      ECS_TASK_DEFINITION: .aws/api-gateway-task-definition.json
    #      CONTAINER_NAME: api-gateway

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push API Gateway Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building API Gateway Docker image..."
          docker build -f api-gateway/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #      - name: Fill in the new image ID in the Amazon ECS task definition
  #        id: task-def
  #        uses: aws-actions/amazon-ecs-render-task-definition@v1
  #        with:
  #          task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #          container-name: ${{ env.CONTAINER_NAME }}
  #          image: ${{ steps.build-image.outputs.image }}
  #
  #      - name: Deploy Amazon ECS task definition
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{ env.ECS_SERVICE }}
  #          cluster: ${{ env.ECS_CLUSTER }}
  #          wait-for-service-stability: true

  deploy-auth-service:
    name: Deploy Auth Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.auth-service == 'true'
    environment: production
    env:
      ECR_REPOSITORY: brieflyz/auth-service
    #      ECS_SERVICE: brieflyz-auth-service-service
    #      ECS_CLUSTER: brieflyz-cluster
    #      ECS_TASK_DEFINITION: .aws/auth-service-task-definition.json
    #      CONTAINER_NAME: auth-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Auth Service Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Auth Service Docker image..."
          docker build -f auth-service/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #      - name: Fill in the new image ID in the Amazon ECS task definition
  #        id: task-def
  #        uses: aws-actions/amazon-ecs-render-task-definition@v1
  #        with:
  #          task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #          container-name: ${{ env.CONTAINER_NAME }}
  #          image: ${{ steps.build-image.outputs.image }}
  #
  #      - name: Deploy Amazon ECS task definition
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{ env.ECS_SERVICE }}
  #          cluster: ${{ env.ECS_CLUSTER }}
  #          wait-for-service-stability: true

  deploy-subscription-service:
    name: Deploy Subscription Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.subscription-service == 'true'
    environment: production
    env:
      ECR_REPOSITORY: brieflyz/subscription-service
    #      ECS_SERVICE: brieflyz-subscription-service-service
    #      ECS_CLUSTER: brieflyz-cluster
    #      ECS_TASK_DEFINITION: .aws/subscription-service-task-definition.json
    #      CONTAINER_NAME: subscription-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Subscription Service Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Subscription Service Docker image..."
          docker build -f subscription-service/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #      - name: Fill in the new image ID in the Amazon ECS task definition
  #        id: task-def
  #        uses: aws-actions/amazon-ecs-render-task-definition@v1
  #        with:
  #          task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #          container-name: ${{ env.CONTAINER_NAME }}
  #          image: ${{ steps.build-image.outputs.image }}
  #
  #      - name: Deploy Amazon ECS task definition
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{ env.ECS_SERVICE }}
  #          cluster: ${{ env.ECS_CLUSTER }}
  #          wait-for-service-stability: true

  deploy-ai-service:
    name: Deploy AI Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.ai-service == 'true'
    environment: production
    env:
      ECR_REPOSITORY: brieflyz/ai-service
    #      ECS_SERVICE: brieflyz-ai-service-service
    #      ECS_CLUSTER: brieflyz-cluster
    #      ECS_TASK_DEFINITION: .aws/ai-service-task-definition.json
    #      CONTAINER_NAME: ai-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push AI Service Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building AI Service Docker image..."
          docker build -f ai-service/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #      - name: Fill in the new image ID in the Amazon ECS task definition
  #        id: task-def
  #        uses: aws-actions/amazon-ecs-render-task-definition@v1
  #        with:
  #          task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #          container-name: ${{ env.CONTAINER_NAME }}
  #          image: ${{ steps.build-image.outputs.image }}
  #
  #      - name: Deploy Amazon ECS task definition
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{ env.ECS_SERVICE }}
  #          cluster: ${{ env.ECS_CLUSTER }}
  #          wait-for-service-stability: true

  deploy-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [ filter, deploy-api-gateway, deploy-auth-service, deploy-subscription-service, deploy-ai-service ]
    if: always()
    
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Modules Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **API Gateway**: ${{ needs.filter.outputs.api-gateway == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auth Service**: ${{ needs.filter.outputs.auth-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Subscription Service**: ${{ needs.filter.outputs.subscription-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Service**: ${{ needs.filter.outputs.ai-service == 'true' && 'âœ… Changed' || 'âšª No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-api-gateway.result }}" == "success" ]]; then
            echo "- **API Gateway**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "failure" ]]; then
            echo "- **API Gateway**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "skipped" ]]; then
            echo "- **API Gateway**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-auth-service.result }}" == "success" ]]; then
            echo "- **Auth Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "failure" ]]; then
            echo "- **Auth Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "skipped" ]]; then
            echo "- **Auth Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-subscription-service.result }}" == "success" ]]; then
            echo "- **Subscription Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "failure" ]]; then
            echo "- **Subscription Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "skipped" ]]; then
            echo "- **Subscription Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-ai-service.result }}" == "success" ]]; then
            echo "- **AI Service**: ðŸŸ¢ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "failure" ]]; then
            echo "- **AI Service**: ðŸ”´ Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "skipped" ]]; then
            echo "- **AI Service**: âšª Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY