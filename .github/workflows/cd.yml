name: CD - Deploy to GHCR & GKE

on:
  push:
    branches: [ develop, master ]

env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GCP_REGION: asia-northeast3-a
  NAMESPACE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  filter:
    name: Filter Updated Modules
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      auth-service: ${{ steps.filter.outputs.auth-service }}
      subscription-service: ${{ steps.filter.outputs.subscription-service }}
      ai-service: ${{ steps.filter.outputs.ai-service }}
      document-service: ${{ steps.filter.outputs.document-service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            subscription-service:
              - 'subscription-service/**'
            ai-service:
              - 'ai-service/**'
            document-service:
              - 'document-service/**'

  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.api-gateway == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      SERVICE_NAME: api-gateway
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: gitsha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.SERVICE_NAME }}
          tags: |
            ${{ github.ref == 'refs/heads/master' && format('prod-{0}', env.SHORT_SHA) || format('dev-{0}', env.SHORT_SHA) }}
            ${{ github.ref == 'refs/heads/master' && 'latest' || '' }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        env:
          IMAGE_URI: ${{ steps.meta.outputs.tags }}
        run: |
          if kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.IMAGE_URI }} -n ${{ env.NAMESPACE }}
            kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          else
            echo "Deployment ${{ env.SERVICE_NAME }} not found. Skipping set image and rollout status."
          fi

  deploy-auth-service:
    name: Deploy Auth Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.auth-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      SERVICE_NAME: auth-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: gitsha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.SERVICE_NAME }}
          tags: |
            ${{ github.ref == 'refs/heads/master' && format('prod-{0}', env.SHORT_SHA) || format('dev-{0}', env.SHORT_SHA) }}
            ${{ github.ref == 'refs/heads/master' && 'latest' || '' }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        env:
          IMAGE_URI: ${{ steps.meta.outputs.tags }}
        run: |
          if kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.IMAGE_URI }} -n ${{ env.NAMESPACE }}
            kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          else
            echo "Deployment ${{ env.SERVICE_NAME }} not found. Skipping set image and rollout status."
          fi

  deploy-subscription-service:
    name: Deploy Subscription Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.subscription-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      SERVICE_NAME: subscription-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: gitsha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.SERVICE_NAME }}
          tags: |
            ${{ github.ref == 'refs/heads/master' && format('prod-{0}', env.SHORT_SHA) || format('dev-{0}', env.SHORT_SHA) }}
            ${{ github.ref == 'refs/heads/master' && 'latest' || '' }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        env:
          IMAGE_URI: ${{ steps.meta.outputs.tags }}
        run: |
          if kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.IMAGE_URI }} -n ${{ env.NAMESPACE }}
            kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          else
            echo "Deployment ${{ env.SERVICE_NAME }} not found. Skipping set image and rollout status."
          fi

  deploy-ai-service:
    name: Deploy AI Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.ai-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      SERVICE_NAME: ai-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: gitsha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.SERVICE_NAME }}
          tags: |
            ${{ github.ref == 'refs/heads/master' && format('prod-{0}', env.SHORT_SHA) || format('dev-{0}', env.SHORT_SHA) }}
            ${{ github.ref == 'refs/heads/master' && 'latest' || '' }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        env:
          IMAGE_URI: ${{ steps.meta.outputs.tags }}
        run: |
          if kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.IMAGE_URI }} -n ${{ env.NAMESPACE }}
            kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          else
            echo "Deployment ${{ env.SERVICE_NAME }} not found. Skipping set image and rollout status."
          fi

  deploy-document-service:
    name: Deploy Document Service
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.document-service == 'true'
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    env:
      SERVICE_NAME: document-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: gitsha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.SERVICE_NAME }}
          tags: |
            ${{ github.ref == 'refs/heads/master' && format('prod-{0}', env.SHORT_SHA) || format('dev-{0}', env.SHORT_SHA) }}
            ${{ github.ref == 'refs/heads/master' && 'latest' || '' }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        env:
          IMAGE_URI: ${{ steps.meta.outputs.tags }}
        run: |
          if kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.IMAGE_URI }} -n ${{ env.NAMESPACE }}
            kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          else
            echo "Deployment ${{ env.SERVICE_NAME }} not found. Skipping set image and rollout status."
          fi

  deploy-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [ filter, deploy-api-gateway, deploy-auth-service, deploy-subscription-service, deploy-ai-service, deploy-document-service ]
    if: always()
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Modules Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **API Gateway**: ${{ needs.filter.outputs.api-gateway == 'true' && '✅ Changed' || '⚪ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auth Service**: ${{ needs.filter.outputs.auth-service == 'true' && '✅ Changed' || '⚪ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Subscription Service**: ${{ needs.filter.outputs.subscription-service == 'true' && '✅ Changed' || '⚪ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Service**: ${{ needs.filter.outputs.ai-service == 'true' && '✅ Changed' || '⚪ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Document Service**: ${{ needs.filter.outputs.document-service == 'true' && '✅ Changed' || '⚪ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-api-gateway.result }}" == "success" ]]; then
            echo "- **API Gateway**: 🟢 Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "failure" ]]; then
            echo "- **API Gateway**: 🔴 Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-api-gateway.result }}" == "skipped" ]]; then
            echo "- **API Gateway**: ⚪ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-auth-service.result }}" == "success" ]]; then
            echo "- **Auth Service**: 🟢 Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "failure" ]]; then
            echo "- **Auth Service**: 🔴 Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-auth-service.result }}" == "skipped" ]]; then
            echo "- **Auth Service**: ⚪ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-subscription-service.result }}" == "success" ]]; then
            echo "- **Subscription Service**: 🟢 Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "failure" ]]; then
            echo "- **Subscription Service**: 🔴 Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-subscription-service.result }}" == "skipped" ]]; then
            echo "- **Subscription Service**: ⚪ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-ai-service.result }}" == "success" ]]; then
            echo "- **AI Service**: 🟢 Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "failure" ]]; then
            echo "- **AI Service**: 🔴 Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-ai-service.result }}" == "skipped" ]]; then
            echo "- **AI Service**: ⚪ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-document-service.result }}" == "success" ]]; then
            echo "- **Document Service**: 🟢 Successfully deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-document-service.result }}" == "failure" ]]; then
            echo "- **Document Service**: 🔴 Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-document-service.result }}" == "skipped" ]]; then
            echo "- **Document Service**: ⚪ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY