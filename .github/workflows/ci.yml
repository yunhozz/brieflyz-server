name: CI - Build and Tests

on:
  pull_request:
    branches: [ develop ]

env:
  DOCKER_COMPOSE_FILE: docker-compose-test.yml

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build project (excluding tests)
        run: ./gradlew build -x test --stacktrace

  tests:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      checks: write
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Set up Configurations
        run: |
          echo "${{ secrets.ENV }}" > .env
          
          mkdir -p core/src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./core/src/main/resources/application.properties
          
          mkdir -p conf/mysql
          echo "${{ secrets.MY_SOURCE_CNF }}" > ./conf/mysql/my-source.cnf
          echo "${{ secrets.MY_REPLICA_CNF }}" > ./conf/mysql/my-replica.cnf
          
          mkdir -p conf/redis
          echo "${{ secrets.REDIS_CONF }}" > ./conf/redis/redis-0.conf
          
          mkdir -p conf/postgres
          echo "${{ secrets.POSTGRES_CONF }}" > ./conf/postgres/postgres.conf
          echo "${{ secrets.PG_HBA_CONF }}" > ./conf/postgres/pg_hba.conf

      - name: Set up Docker Containers
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} --env-file .env up -d
          sleep 10
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps

      - name: Run Unit & Integration Tests
        run: ./gradlew test --stacktrace

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/build/reports/tests/test/
            **/build/test-results/test/
          retention-days: 7

      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'Test Results'
          path: '**/build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: false
          only-summary: 'true'
        continue-on-error: true

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 각 모듈별 테스트 결과 확인
          total_tests=0
          total_failures=0
          total_errors=0
          modules_tested=0
          
          for module in auth-service subscription-service api-gateway core; do
            if [ -d "$module/build/test-results/test" ] && [ "$(ls -A $module/build/test-results/test/*.xml 2>/dev/null)" ]; then
              modules_tested=$((modules_tested + 1))
              echo "### ✅ $module" >> $GITHUB_STEP_SUMMARY
          
              # XML 파일에서 테스트 결과 파싱
              for xml_file in $module/build/test-results/test/TEST-*.xml; do
                if [ -f "$xml_file" ]; then
                  raw_name=$(grep -oP '(?<=<testsuite name=")[^"]+' "$xml_file" | head -n 1)
                  name=$(basename "$raw_name" | sed 's/.*\.//')
                  count=$(grep -o 'tests="[0-9]*"' "$xml_file" | cut -d'"' -f2 || echo "0")
                  failures=$(grep -o 'failures="[0-9]*"' "$xml_file" | cut -d'"' -f2 || echo "0")
                  errors=$(grep -o 'errors="[0-9]*"' "$xml_file" | cut -d'"' -f2 || echo "0")
          
                  total_tests=$((total_tests + tests))
                  total_failures=$((total_failures + failures))
                  total_errors=$((total_errors + errors))
          
                  echo "  - Name: $name, Count: $count, Failures: $failures, Errors: $errors" >> $GITHUB_STEP_SUMMARY
                fi
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # 전체 요약
          echo "### 📊 Overall Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Modules Tested**: $modules_tested" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Failures**: $total_failures" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors**: $total_errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_failures -eq 0 ] && [ $total_errors -eq 0 ] && [ $total_tests -gt 0 ]; then
            echo "🎉 **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [ $total_tests -eq 0 ]; then
            echo "⚠️ **No tests were found or executed.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed. Please check the detailed reports.**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Test Results
        if: always()
        run: |
          # 테스트 실패 시 workflow 실패 처리
          total_failures=0
          total_errors=0
          
          for module in auth-service subscription-service api-gateway core; do
            if [ -d "$module/build/test-results/test" ]; then
              for xml_file in $module/build/test-results/test/TEST-*.xml; do
                if [ -f "$xml_file" ]; then
                  failures=$(grep -o 'failures="[0-9]*"' "$xml_file" | cut -d'"' -f2 || echo "0")
                  errors=$(grep -o 'errors="[0-9]*"' "$xml_file" | cut -d'"' -f2 || echo "0")
          
                  total_failures=$((total_failures + failures))
                  total_errors=$((total_errors + errors))
                fi
              done
            fi
          done
          
          if [ $total_failures -gt 0 ] || [ $total_errors -gt 0 ]; then
            echo "Tests failed with $total_failures failures and $total_errors errors"
            exit 1
          else
            echo "All tests passed successfully"
          fi

      - name: Clean up Docker Containers
        if: always()
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans